{"version":3,"sources":["../node_modules/.pnpm/tailwindcss@3.4.17/node_modules/tailwindcss/lib/util/createPlugin.js","../node_modules/.pnpm/tailwindcss@3.4.17/node_modules/tailwindcss/lib/public/create-plugin.js","../node_modules/.pnpm/tailwindcss@3.4.17/node_modules/tailwindcss/plugin.js","../src/index.ts","../src/lib/golden-ratio.ts","../src/lib/color.ts","../src/lib/layout.ts","../src/lib/tailwind.ts"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nObject.defineProperty(exports, \"default\", {\n    enumerable: true,\n    get: function() {\n        return _default;\n    }\n});\nfunction createPlugin(plugin, config) {\n    return {\n        handler: plugin,\n        config\n    };\n}\ncreatePlugin.withOptions = function(pluginFunction, configFunction = ()=>({})) {\n    const optionsFunction = function(options) {\n        return {\n            __options: options,\n            handler: pluginFunction(options),\n            config: configFunction(options)\n        };\n    };\n    optionsFunction.__isOptionsFunction = true;\n    // Expose plugin dependencies so that `object-hash` returns a different\n    // value if anything here changes, to ensure a rebuild is triggered.\n    optionsFunction.__pluginFunction = pluginFunction;\n    optionsFunction.__configFunction = configFunction;\n    return optionsFunction;\n};\nconst _default = createPlugin;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nObject.defineProperty(exports, \"default\", {\n    enumerable: true,\n    get: function() {\n        return _default;\n    }\n});\nconst _createPlugin = /*#__PURE__*/ _interop_require_default(require(\"../util/createPlugin\"));\nfunction _interop_require_default(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\nconst _default = _createPlugin.default;\n","let createPlugin = require('./lib/public/create-plugin')\nmodule.exports = (createPlugin.__esModule ? createPlugin : { default: createPlugin }).default\n","export * from './lib/golden-ratio';\nexport * from './lib/color';\nexport * from './lib/layout';      // <-- dopo aver sistemato layout.ts\nexport { createTailwindPlugin } from './lib/tailwind';","\n// ──────────────────────────────────────────────────────────────\n// File: lib/golden-ratio.ts  ✧  Golden‑Ratio Toolkit (v3.0)\n// ──────────────────────────────────────────────────────────────\n\nexport const PHI = 1.618033988749895 as const;\nexport const PHI_SMALL = 1 / PHI as const;            // φ⁻¹\nexport const PHI_SQUARED = PHI * PHI as const;        // φ²\n\n// ─── core math with cache ────────────────────────────────────\nconst _cache: Record<number, number> = {};\nfor (let p = -10; p <= 10; p++) _cache[p] = Math.pow(PHI, p); // warm‑up\n\nexport const phi = /* @__PURE__ */ (power: number = 1): number =>\n  _cache[power] ?? (_cache[power] = Math.pow(PHI, power));\n\n/** High‑precision variant (to 1‑15 significant digits). */\nexport const phiPrecise = (power: number = 1, digits: number = 15): number =>\n  parseFloat(Math.pow(PHI, power).toPrecision(Math.min(Math.max(digits, 1), 21)));\n\n// ─── unit factory ─────────────────────────────────────────────\ntype Unit = 'rem' | 'px' | 'vw' | 'vh' | '%' | 'em' | (string & {});\nexport type UnitString<U extends string = Unit> = `${number}${U}`;\n\nexport const toUnit = /* @__PURE__ */ <U extends string>(unit: U, prec = 3) =>\n  (base = 1, power = 1, precision = prec): UnitString<U> =>\n    `${+(base * phi(power)).toFixed(precision)}${unit}` as UnitString<U>;\n\nexport const rem = toUnit('rem');\nexport const px  = toUnit('px', 0);\nexport const em  = toUnit('em');\nexport const vw  = toUnit('vw');\nexport const vh  = toUnit('vh');\nexport const pct = toUnit('%');\n\n// ─── responsive clamp ────────────────────────────────────────\nexport const phiClamp = (\n  min: number,\n  powerSpan = 1,\n  minW = 320,\n  maxW = 1920,\n  unit: Unit = 'rem',\n  prec = 3,\n): string => {\n  const max = min * phi(powerSpan);\n  const fmt = (v: number) => v.toFixed(prec);\n  return `clamp(${fmt(min)}${unit}, calc(${fmt(min)}${unit} + (${fmt(max - min)} * ((100vw - ${minW}px) / (${maxW} - ${minW})))), ${fmt(max)}${unit})`;\n};\n\n// ─── scales ──────────────────────────────────────────────────\nexport const createSpacingScale = (base = 0.25, prec = 3) => {\n  const toRem = toUnit('rem', prec);\n  const keys = ['0','px','0.5','1','2','3','4','5','6','8','10','12','16','20','24','32'] as const;\n  const powers = [Number.NEGATIVE_INFINITY,Number.NEGATIVE_INFINITY,-1,0,1,2,3,4,5,6,7,8,9,10,11,12];\n  return keys.reduce<Record<string,string>>((o,k,i)=>{\n    if(k==='0') o[k]='0';\n    else if(k==='px') o[k]='1px';\n    else o[k]=toRem(base,powers[i]);\n    return o;\n  },{});\n};\n\nexport const createTypoScale = (base = 1, prec = 3) => {\n  const toRem = toUnit('rem', prec);\n  const keys = ['3xs','2xs','xs','sm','base','md','lg','xl','2xl','3xl','4xl','5xl'] as const;\n  const powers = [-3,-2,-1,-0.5,0,0.5,1,1.5,2,3,4,5];\n  return keys.reduce<Record<string,string>>((o,k,i)=>(o[k]=toRem(base,powers[i]),o),{});\n};\n\n// ─── contextual scales & ratios ───────────────────────────────\nexport function createContextScale<T extends string, U extends Unit = 'rem'>(\n  context: Record<T, number>,\n  base = 1,\n  unit: U = 'rem' as U,\n  prec = 3\n): Record<T, UnitString<U>> {\n  const toU = toUnit(unit, prec);\n  return Object.fromEntries(\n    Object.entries(context).map(([k,p])=>[k,toU(base,p as number)])\n  ) as Record<T, UnitString<U>>;\n}\n\nexport const getContextRatio = <T extends string>(\n  context: Record<T, number>,\n  a: T, b: T\n) => phi(context[a] - context[b]);\n\nexport const getContextUnit = <T extends string, U extends Unit = 'rem'>(\n  context: Record<T, number>,\n  a: T, b: T,\n  base = 1, unit: U = 'rem' as U, prec = 3\n): UnitString<U> =>\n  `${+(base * getContextRatio(context,a,b)).toFixed(prec)}${unit}` as UnitString<U>;\n\n// hash helper for React deps\nexport const hashContext = (ctx: Record<string, number>) =>\n  Object.entries(ctx).sort().map(([k,v])=>k+v).join('|');\n\n// ─── tailwind & css-vars ─────────────────────────────────────\nexport const createTailwindPlugin = () => ({\n  handler({ addBase }: { addBase: (o: Record<string, any>) => void }) {\n    addBase({ ':root': { '--phi': PHI, '--phi-small': PHI_SMALL, '--phi-squared': PHI_SQUARED } });\n  }\n});\n\nexport const phiCSS = (prec = 6) =>\n  `:root{--phi:${PHI.toFixed(prec)};--phi-small:${PHI_SMALL.toFixed(prec)};--phi-squared:${PHI_SQUARED.toFixed(prec)};}`;\n","/**\n * Golden‑Ratio Toolkit • Color helpers (OKLCH)\n * -------------------------------------------------\n * Utilities for generating harmonious colour palettes whose\n * hues are spaced by the golden angle (~137.508°).  We emit\n * colours in the OKLCH space so that perceptual lightness is\n * preserved across the wheel.  All helpers are side‑effect‑free\n * and tree‑shakable.\n *\n * Usage:\n *   import {\n *     goldenHue,\n *     oklch,\n *     createGoldenHueScale,\n *   } from \"./color\";\n *\n *   const primary = oklch(0.78, 0.16, goldenHue(0));\n *   const palette = createGoldenHueScale(6); // 6‑colour palette\n *\n * Why OKLCH? — It is perceptually uniform, meaning equal\n * increments in C (chroma) or L (lightness) correspond to\n * roughly equal perceived changes.  That keeps the palette in\n * “vera armonia e pace vera”.\n */\n\n// ---------------------------------------------------------------------------\n// Constants\n// ---------------------------------------------------------------------------\n\n/**\n * Golden angle in degrees (360° / φ²)\n * Ref: https://en.wikipedia.org/wiki/Golden_angle\n */\nexport const GOLDEN_ANGLE_DEG = 137.50776405003785;\n\n// Default perceptual values – tweak to taste or pass via options\nconst DEFAULT_LIGHTNESS = 0.78; // 0–1 (OKLCH L*)\nconst DEFAULT_CHROMA = 0.16;    // 0–~0.4 safe for WCAG AA on white\n\n// ---------------------------------------------------------------------------\n// Core helpers\n// ---------------------------------------------------------------------------\n\n/**\n * Returns the n‑th hue (deg 0‑360) rotated by the golden angle.\n */\nexport function goldenHue(index: number, baseHue = 0): number {\n  const hue = (baseHue + index * GOLDEN_ANGLE_DEG) % 360;\n  return hue < 0 ? hue + 360 : hue;\n}\n\n/**\n * Helper to format an OKLCH string with desired precision.\n */\nexport function oklch(\n  lightness: number,\n  chroma: number,\n  hueDeg: number,\n  precision: number = 3\n): string {\n  const L = lightness.toFixed(precision);\n  const C = chroma.toFixed(precision);\n  const H = hueDeg.toFixed(1);\n  return `oklch(${L} ${C} ${H})`;\n}\n\n/**\n * Create an array of OKLCH colours whose hues follow the golden angle.\n *\n * @param steps   Number of colours to generate (≥ 1)\n * @param opts    Optional overrides for base hue, lightness, chroma, precision\n * @returns       String array of `length === steps`, each `\"oklch(L C H)\"`\n */\nexport interface GoldenHueOptions {\n  /** Starting hue (deg). *Default 0* */\n  baseHue?: number;\n  /** Lightness 0–1 (OKLCH). *Default 0.78* */\n  lightness?: number;\n  /** Chroma 0–≈0.4 for safe SRGB. *Default 0.16* */\n  chroma?: number;\n  /** Decimal places for L & C. *Default 3* */\n  precision?: number;\n}\n\nexport function createGoldenHueScale(\n  steps: number,\n  opts: GoldenHueOptions = {}\n): string[] {\n  if (steps < 1 || !Number.isFinite(steps)) {\n    throw new RangeError(\"steps must be a positive integer ≥ 1\");\n  }\n\n  const {\n    baseHue = 0,\n    lightness = DEFAULT_LIGHTNESS,\n    chroma = DEFAULT_CHROMA,\n    precision = 3,\n  } = opts;\n\n  return Array.from({ length: steps }, (_, i) =>\n    oklch(lightness, chroma, goldenHue(i, baseHue), precision)\n  );\n}\n\n// ---------------------------------------------------------------------------\n// Named exports for treeshaking friendliness\n// ---------------------------------------------------------------------------\nexport const phiHue = goldenHue; // alias for consistency with spacing helpers\n","/**\n * Golden‑Ratio Toolkit • Layout helpers (rectangles & corner radii)\n * -----------------------------------------------------------------\n * Utilities for computing sizes that remain mathematically bound to\n * φ.  They cover two common UI needs:\n *   1. **Golden rectangles** – ensure a width / height pair follows\n *      the φ:1 proportion.\n *   2. **Rounded‑corner radii** – generate radii that are a further\n *      golden subdivision of the shortest rectangle side so that\n *      bevels themselves feel in‑harmony with the host component.\n *\n * All helpers are side‑effect‑free and tree‑shakable.\n */\n\nimport { phi } from \"./golden-ratio\";\n\n// ---------------------------------------------------------------------------\n// Golden rectangle helpers\n// ---------------------------------------------------------------------------\n\nexport interface GoldenRect {\n  width: number;\n  height: number;\n}\n\n/**\n * Given one side, compute the other so that `height / width = φ`.\n * If both sides are provided we adjust the missing one only when\n * it breaks the ratio (within ε tolerance).\n */\nexport function goldenRectangle({\n  width,\n  height,\n}: Partial<GoldenRect> & { width?: number; height?: number }): GoldenRect {\n  if (width == null && height == null) {\n    throw new Error(\"Provide at least width or height\");\n  }\n  const ratio = phi(1); // φ ≈ 1.618\n  const eps = 0.0001; // tolerance for floating‑point comparison\n\n  if (width != null && height != null) {\n    // Adjust the lesser‑significant side only if ratio breached\n    const current = height / width;\n    if (Math.abs(current - ratio) < eps) return { width, height };\n    // Prefer keeping the larger dim unchanged\n    if (current > ratio) {\n      // height too big → scale width\n      return { width: height / ratio, height };\n    }\n    // width too big → scale height\n    return { width, height: width * ratio };\n  }\n\n  if (width != null) return { width, height: width * ratio };\n  return { height, width: height! / ratio };\n}\n\n// ---------------------------------------------------------------------------\n// Corner radius helpers\n// ---------------------------------------------------------------------------\n\nexport interface GoldenRadiusOptions {\n  /**\n   * Which power of φ to divide by.  1 → side / φ, 2 → side / φ², …\n   * Defaults to 2 so that the radius is a gentle ~0.382× of the\n   * shorter side (visually pleasing, rarely over‑rounded).\n   */\n  power?: number;\n}\n\n/**\n * Compute a corner radius that is a golden subdivision of the smallest side.\n *\n * Example – a 400×250 card: `minSide = 250`, radius = 250 / φ² ≈ 95px.\n */\nexport function goldenCornerRadius(\n  rect: GoldenRect,\n  opts: GoldenRadiusOptions = {}\n): number {\n  const { power = 2 } = opts;\n  const minSide = Math.min(rect.width, rect.height);\n  return minSide / phi(power);\n}\n","/**\n * Golden‑Ratio Toolkit • Tailwind plugin\n * --------------------------------------------------\n * Exposes φ‑based colour tokens and border‑radius utilities\n * so that all spacing, typography *and* visual accents stay\n * in harmonic proportion.\n */\n\nimport plugin from \"tailwindcss/plugin\";\nimport { createGoldenHueScale, GoldenHueOptions } from \"./color\";\nimport { phi } from \"./golden-ratio\";\n\n// ---------------------------------------------------------------------------\n// Public options\n// ---------------------------------------------------------------------------\n\nexport interface TailwindGoldenOptions extends GoldenHueOptions {\n  /** Number of colour steps (default 6) */\n  colorSteps?: number;\n  /** Number of border‑radius steps (default 4) */\n  radiusSteps?: number;\n  /** Base rectangle short side in px for computing radii (default 100) */\n  rectBase?: number;\n  /** Power offset for radius calculation (default 2) */\n  radiusPowerStart?: number;\n}\n\n// ---------------------------------------------------------------------------\n// Internal helpers\n// ---------------------------------------------------------------------------\n\nconst buildRadiusTokens = (\n  steps: number,\n  rectBase: number,\n  powerStart: number\n): Record<string, string> => {\n  const tokens: Record<string, string> = {};\n  for (let i = 0; i < steps; i++) {\n    const power = powerStart + i;\n    tokens[`phi-${power}`] = `${(rectBase / phi(power)).toFixed(2)}px`;\n  }\n  return tokens;\n};\n\n// ---------------------------------------------------------------------------\n// Plugin factory\n// ---------------------------------------------------------------------------\n\nexport const createTailwindPlugin = (\n  opts: TailwindGoldenOptions = {}\n) =>\n  plugin(function ({ addBase, theme, addUtilities }) {\n    const {\n      // colours\n      colorSteps = 6,\n      baseHue = 0,\n      lightness,\n      chroma,\n      precision,\n      // radii\n      radiusSteps = 4,\n      rectBase = 100,\n      radiusPowerStart = 2,\n    } = opts;\n\n    // 1) Colour CSS variables\n    const hues = createGoldenHueScale(colorSteps, {\n      baseHue,\n      lightness,\n      chroma,\n      precision,\n    });\n    const colorVars: Record<string, string> = {};\n    hues.forEach((clr, i) => {\n      colorVars[`--phi-color-${i}`] = clr;\n    });\n\n    addBase({\n      \":root\": colorVars,\n    });\n\n    // 2) Extend theme tokens\n    const radiusTokens = buildRadiusTokens(\n      radiusSteps,\n      rectBase,\n      radiusPowerStart\n    );\n\n    // Expose via `theme.extend` so users can toggle easily\n    addUtilities(\n      Object.entries(radiusTokens).reduce((acc, [k, v]) => {\n        acc[`.rounded-${k}`] = { \"border-radius\": v };\n        return acc;\n      }, {} as Record<string, Record<string, string>>),\n      { respectPrefix: false }\n    );\n\n    // Theme extensions (colours)\n    //   Note: We can’t mutate theme() inside plugin callback, but we can\n    //   encourage users to merge it in their config.  Provide helper below.\n  });\n\n/**\n * Quick helper to extend a user’s Tailwind config colours + radii in JS.\n *\n * Example:\n *   import { extendTailwindTheme } from 'golden-ratio-toolkit-v3/tailwind';\n *   module.exports = extendTailwindTheme({});\n */\nexport function extendTailwindTheme(opts: TailwindGoldenOptions = {}) {\n  const {\n    colorSteps = 6,\n    baseHue = 0,\n    lightness,\n    chroma,\n    precision,\n    radiusSteps = 4,\n    rectBase = 100,\n    radiusPowerStart = 2,\n  } = opts;\n\n  const hues = createGoldenHueScale(colorSteps, {\n    baseHue,\n    lightness,\n    chroma,\n    precision,\n  });\n  const colors: Record<string, string> = {};\n  hues.forEach((clr, i) => (colors[`phi-${i}`] = `var(--phi-color-${i})`));\n\n  return {\n    theme: {\n      extend: {\n        colors,\n        borderRadius: buildRadiusTokens(radiusSteps, rectBase, radiusPowerStart),\n      },\n    },\n    plugins: [createTailwindPlugin(opts)],\n  };\n}\n"],"mappings":"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","names":["require_createPlugin","__commonJSMin","exports","_default","createPlugin","plugin","config","pluginFunction","configFunction","optionsFunction","options","require_create_plugin","__commonJSMin","exports","_default","_createPlugin","_interop_require_default","obj","require_plugin","__commonJSMin","exports","module","createPlugin","index_exports","__export","GOLDEN_ANGLE_DEG","PHI","PHI_SMALL","PHI_SQUARED","createContextScale","createGoldenHueScale","createSpacingScale","createTailwindPlugin","createTypoScale","em","getContextRatio","getContextUnit","goldenCornerRadius","goldenHue","goldenRectangle","hashContext","oklch","pct","phi","phiCSS","phiClamp","phiHue","phiPrecise","px","rem","toUnit","vh","vw","__toCommonJS","PHI","PHI_SMALL","PHI_SQUARED","_cache","p","phi","power","phiPrecise","digits","toUnit","unit","prec","base","precision","rem","px","em","vw","vh","pct","phiClamp","min","powerSpan","minW","maxW","max","fmt","v","createSpacingScale","toRem","keys","powers","o","k","i","createTypoScale","createContextScale","context","toU","getContextRatio","a","b","getContextUnit","hashContext","ctx","phiCSS","prec","PHI","PHI_SMALL","PHI_SQUARED","GOLDEN_ANGLE_DEG","DEFAULT_LIGHTNESS","DEFAULT_CHROMA","goldenHue","index","baseHue","hue","oklch","lightness","chroma","hueDeg","precision","L","C","H","createGoldenHueScale","steps","opts","_","i","phiHue","goldenRectangle","width","height","ratio","phi","eps","current","goldenCornerRadius","rect","opts","power","import_plugin","buildRadiusTokens","steps","rectBase","powerStart","tokens","i","power","phi","createTailwindPlugin","opts","plugin","addBase","theme","addUtilities","colorSteps","baseHue","lightness","chroma","precision","radiusSteps","radiusPowerStart","hues","createGoldenHueScale","colorVars","clr","radiusTokens","acc","k","v"]}